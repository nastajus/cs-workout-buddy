// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Everything.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Wobu.Everything {
  public static partial class Everything
  {
    static readonly string __ServiceName = "Wobu.Everything.Everything";

    static readonly grpc::Marshaller<global::Wobu.Everything.Exercise.Types.Type> __Marshaller_Type = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Wobu.Everything.Exercise.Types.Type.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Wobu.Everything.RepeatedExercises> __Marshaller_RepeatedExercises = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Wobu.Everything.RepeatedExercises.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Wobu.Everything.Exercise> __Marshaller_Exercise = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Wobu.Everything.Exercise.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Wobu.Everything.Workout> __Marshaller_Workout = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Wobu.Everything.Workout.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Timestamp> __Marshaller_Timestamp = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Timestamp.Parser.ParseFrom);

    static readonly grpc::Method<global::Wobu.Everything.Exercise.Types.Type, global::Wobu.Everything.RepeatedExercises> __Method_GetExecisesOf_R = new grpc::Method<global::Wobu.Everything.Exercise.Types.Type, global::Wobu.Everything.RepeatedExercises>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetExecisesOf_R",
        __Marshaller_Type,
        __Marshaller_RepeatedExercises);

    static readonly grpc::Method<global::Wobu.Everything.Exercise.Types.Type, global::Wobu.Everything.Exercise> __Method_GetExecisesOf_S = new grpc::Method<global::Wobu.Everything.Exercise.Types.Type, global::Wobu.Everything.Exercise>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetExecisesOf_S",
        __Marshaller_Type,
        __Marshaller_Exercise);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Wobu.Everything.Workout> __Method_StartWorkout = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Wobu.Everything.Workout>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartWorkout",
        __Marshaller_Empty,
        __Marshaller_Workout);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Wobu.Everything.Workout> __Method_StopWorkout = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Wobu.Everything.Workout>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StopWorkout",
        __Marshaller_Empty,
        __Marshaller_Workout);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Timestamp, global::Wobu.Everything.RepeatedExercises> __Method_GetExerciseHistoryRecent = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Timestamp, global::Wobu.Everything.RepeatedExercises>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetExerciseHistoryRecent",
        __Marshaller_Timestamp,
        __Marshaller_RepeatedExercises);

    static readonly grpc::Method<global::Wobu.Everything.Exercise.Types.Type, global::Wobu.Everything.Exercise> __Method_GetExerciseHistoryAll = new grpc::Method<global::Wobu.Everything.Exercise.Types.Type, global::Wobu.Everything.Exercise>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetExerciseHistoryAll",
        __Marshaller_Type,
        __Marshaller_Exercise);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Wobu.Everything.EverythingReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Everything</summary>
    public abstract partial class EverythingBase
    {
      /// <summary>
      ///repeated vs. stream experiment
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Wobu.Everything.RepeatedExercises> GetExecisesOf_R(global::Wobu.Everything.Exercise.Types.Type request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetExecisesOf_S(global::Wobu.Everything.Exercise.Types.Type request, grpc::IServerStreamWriter<global::Wobu.Everything.Exercise> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///returns initial workout, with only start time.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Wobu.Everything.Workout> StartWorkout(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///returns the current workout, including stop time.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Wobu.Everything.Workout> StopWorkout(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///have default upToTime //todo: consider encoding this meaning via a message instead of a comment...
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Wobu.Everything.RepeatedExercises> GetExerciseHistoryRecent(global::Google.Protobuf.WellKnownTypes.Timestamp request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///let this be streaming, let it keep causing scrolling
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetExerciseHistoryAll(global::Wobu.Everything.Exercise.Types.Type request, grpc::IServerStreamWriter<global::Wobu.Everything.Exercise> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Everything</summary>
    public partial class EverythingClient : grpc::ClientBase<EverythingClient>
    {
      /// <summary>Creates a new client for Everything</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public EverythingClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Everything that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public EverythingClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected EverythingClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected EverythingClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///repeated vs. stream experiment
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Wobu.Everything.RepeatedExercises GetExecisesOf_R(global::Wobu.Everything.Exercise.Types.Type request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExecisesOf_R(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///repeated vs. stream experiment
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Wobu.Everything.RepeatedExercises GetExecisesOf_R(global::Wobu.Everything.Exercise.Types.Type request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetExecisesOf_R, null, options, request);
      }
      /// <summary>
      ///repeated vs. stream experiment
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Wobu.Everything.RepeatedExercises> GetExecisesOf_RAsync(global::Wobu.Everything.Exercise.Types.Type request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExecisesOf_RAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///repeated vs. stream experiment
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Wobu.Everything.RepeatedExercises> GetExecisesOf_RAsync(global::Wobu.Everything.Exercise.Types.Type request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetExecisesOf_R, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Wobu.Everything.Exercise> GetExecisesOf_S(global::Wobu.Everything.Exercise.Types.Type request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExecisesOf_S(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Wobu.Everything.Exercise> GetExecisesOf_S(global::Wobu.Everything.Exercise.Types.Type request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetExecisesOf_S, null, options, request);
      }
      /// <summary>
      ///returns initial workout, with only start time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Wobu.Everything.Workout StartWorkout(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartWorkout(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///returns initial workout, with only start time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Wobu.Everything.Workout StartWorkout(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartWorkout, null, options, request);
      }
      /// <summary>
      ///returns initial workout, with only start time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Wobu.Everything.Workout> StartWorkoutAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartWorkoutAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///returns initial workout, with only start time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Wobu.Everything.Workout> StartWorkoutAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartWorkout, null, options, request);
      }
      /// <summary>
      ///returns the current workout, including stop time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Wobu.Everything.Workout StopWorkout(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopWorkout(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///returns the current workout, including stop time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Wobu.Everything.Workout StopWorkout(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StopWorkout, null, options, request);
      }
      /// <summary>
      ///returns the current workout, including stop time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Wobu.Everything.Workout> StopWorkoutAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopWorkoutAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///returns the current workout, including stop time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Wobu.Everything.Workout> StopWorkoutAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StopWorkout, null, options, request);
      }
      /// <summary>
      ///have default upToTime //todo: consider encoding this meaning via a message instead of a comment...
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Wobu.Everything.RepeatedExercises GetExerciseHistoryRecent(global::Google.Protobuf.WellKnownTypes.Timestamp request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExerciseHistoryRecent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///have default upToTime //todo: consider encoding this meaning via a message instead of a comment...
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Wobu.Everything.RepeatedExercises GetExerciseHistoryRecent(global::Google.Protobuf.WellKnownTypes.Timestamp request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetExerciseHistoryRecent, null, options, request);
      }
      /// <summary>
      ///have default upToTime //todo: consider encoding this meaning via a message instead of a comment...
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Wobu.Everything.RepeatedExercises> GetExerciseHistoryRecentAsync(global::Google.Protobuf.WellKnownTypes.Timestamp request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExerciseHistoryRecentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///have default upToTime //todo: consider encoding this meaning via a message instead of a comment...
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Wobu.Everything.RepeatedExercises> GetExerciseHistoryRecentAsync(global::Google.Protobuf.WellKnownTypes.Timestamp request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetExerciseHistoryRecent, null, options, request);
      }
      /// <summary>
      ///let this be streaming, let it keep causing scrolling
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Wobu.Everything.Exercise> GetExerciseHistoryAll(global::Wobu.Everything.Exercise.Types.Type request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExerciseHistoryAll(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///let this be streaming, let it keep causing scrolling
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Wobu.Everything.Exercise> GetExerciseHistoryAll(global::Wobu.Everything.Exercise.Types.Type request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetExerciseHistoryAll, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override EverythingClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new EverythingClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(EverythingBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetExecisesOf_R, serviceImpl.GetExecisesOf_R)
          .AddMethod(__Method_GetExecisesOf_S, serviceImpl.GetExecisesOf_S)
          .AddMethod(__Method_StartWorkout, serviceImpl.StartWorkout)
          .AddMethod(__Method_StopWorkout, serviceImpl.StopWorkout)
          .AddMethod(__Method_GetExerciseHistoryRecent, serviceImpl.GetExerciseHistoryRecent)
          .AddMethod(__Method_GetExerciseHistoryAll, serviceImpl.GetExerciseHistoryAll).Build();
    }

  }
}
#endregion
